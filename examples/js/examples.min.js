
var benchingHelp = (function(w, d) {
  /**
   * Gets the frequency aka Hz, aka operations per second
   *
   * @private
   * @param {Object} bench The benchmark object.
   * @returns {number} Returns the adjusted Hz.
   */
  function getHz(bench) {
    if ( !bench ||  !bench.stats || !bench.stats.mean ) { return false; }
    return 1 / (bench.stats.mean + bench.stats.moe);
  }
  function onResult(event) {// optional fn
    // this must be bound to a current tracking class - in this case it's a 'murk' reference
    this.benchResults.push([event.target.name, getHz(event.target)]);
  }
  function getSummary(suite, callback) {
      var benches = suite.filter('successful'),
          fastest = benches.filter('fastest'),
          slowest = benches.filter('slowest');

    var summary = {},
        errors = [],
        fastestHz = fastest && getHz(fastest[0]);

    summary = benches.map(function(b, index) {
      var err = b.error || (b.target && b.target.error || null),
          hz = getHz(b),
          percent = (1 - (hz / fastestHz)) * 100;
      if ( err ) {
        console.warn(err);
        errors.push(err);
      }
      var active = {
        dateTime: Date.now(),
        running: b.running,
        cycles: b.cycles
      };

      var obj = extend(active, {
        name:         b.name || b.id || b.options.id,
        index:        index || -1,
        stats:        b.stats || {},
        times:        b.times || {},
        hz:           hz,
        error:        err,
        percent:      percent,
        isFastest:    Array.isArray(fastest) ? fastest.indexO(b) > -1 : false,
        // slowerPercent: isFinite(hz) ? formatNumber(percent < 1 ? percent.toFixed(2) : Math.round(percent)) : 0,
        slowerPercent: isFinite(hz) ? (percent < 1 ? percent.toFixed(2) : Math.floor(percent)) : 0,
        isSlowest:    Array.isArray(slowest) ? slowest.indexO(b) > -1 : false,
        seconds:      b.times.cycle.toFixed(3),
        remainder:    b.stats.rme.toFixed(2)
      });
      delete obj.stats.sample;
      return obj;
    });
    if ( callback ) {
      errors = errors.length >= 1 ? errors : false;
      callback(errors, summary);
    } else {
      return summary;
    }
  }

  function onComplete() {
    console.log('BENCH.COMPLETE', arguments, '\nSELF:', this);
    // this must be bound to the current `suite` reference
    getSummary(this, function _saveData(err, summary) {
      if ( err ) {  console.error('BENCH.ERROR', err); }
      console.log('BENCH.RESULTS', summary, '\nSuite:', this);
      this.summary = summary;
    }.bind(this));
  }
// Globalize benchmark helpers
  w.benchingHelp = {
    'getHz':      getHz,
    'getSummary': getSummary,
    'onResult':   onResult,
    'onComplete': onComplete
  };

  return w.benchingHelp;

  // simple extend fn
  function extend(parent, child) {
    if (typeof parent == 'object') {
      for (var key in child) {
        if (child.hasOwnProperty(key)) {
          parent[key] = child[key];
        }
      }
    }
    return parent;
  }


})(window, document);

var example = (function(w,d,pub) {

  pub.updateModel = function(el,model,keys,count) {
    var updated = {};
    if (model) updated.model = model;
    if (keys) updated.keys = keys;
    if (count) updated.count = count;
    el.innerHTML = JSON.stringify(updated,null,2);
    return pub;
  };

  return pub;

})(window,document,{});

var basicExample = (function(w,d) {

  var modelOutput, m;

  m = murk({
    dev: true,
    id: 'basic'
  }).registerFilter('reverseStr', function(val) {
    return val.split('').reverse().join('');
  }).registerFilter('highlightText', function() {
    this.style.color = 'red';
  });

  function runBench() {
    var suite = new Benchmark.Suite('basic-example');
    // benchmark tracking code, tightened up a bit //
    m.benchSuite = suite;
    m.benchResults = [];
    m.benchSummary = {};
    // add tests
    return suite
      .add('init: test main function', init)
      //.add('step2: test another function', step2)
      .on('error',    console.error.bind(console, 'YO bench hit error'))
      .on('cycle',    benchingHelp.onResult.bind(m))  // optional fn i think
      .on('complete', benchingHelp.onComplete.bind(suite))
      .run({'maxTime': 50, 'minSamples': 100, 'async': true });
    // Bam, big pimpin!
  }

  function init() {

    modelOutput = d.getElementById('basicModel');

    m.on(['firstExample','secondExample','thirdExample','fourthExample'], function(key) {
      var count = this.getAttribute('data-murk-count');
      var el = d.getElementById(key + 'Count');
      var input = d.getElementById(key);
      if (!input.value) input.value = m.state.model[key];
      if (count) {
        m.set(key + 'Count', count);
        el.style.display = 'inherit';
      }
    }).set({
      firstExample: 'this is',
      secondExample: 'data binding',
      thirdExample: 'murked.'
    });

    example.updateModel(modelOutput,m.state.model,m.state.keys,m.state.totalCount);

    $('[data-murk-example="basic"]').on('keyup blur', function() {
      m.set(this.id, this.value);
      example.updateModel(modelOutput,m.state.model,m.state.keys,m.state.totalCount);
    });

    return m;
  }

  $(d).ready(init);


  // only exposed benchmark method `runBench` is runBench - other shit is wired up when it's ready (probaly soon via promises)
  m.runBench = runBench;
  return m;

})(window,document);
var suite = new Benchmark.Suite('repeat-example', {
  'maxTime': 50,
  'minSamples': 20,
  'async': true
});

var repeatExample = (function(w,d) {
  var modelOutput, m;

  m = murk({
    dev: true,
    id: 'repeat'
  }).registerFilter('reverseStr', function(val) {
    return val.split('').reverse().join('');
  }).registerFilter('highlightText', function() {
    this.style.color = 'red';
  });

  function init() {

    modelOutput = d.getElementById('repeatModel');

    m.on('formErrors', function(key) {
      this.style.display = (!m.state.model[key] ? 'none' : 'block');
      example.updateModel(modelOutput,m.state.model,m.state.keys,m.state.totalCount);
    }).on('repeatedExample', function() {
      example.updateModel(modelOutput,m.state.model,m.state.keys,m.state.totalCount);
    }).set({
      formErrors: false,
      repeatedExample: [{
        name: 'murk',
        age: 5
      }]
    });

    example.updateModel(modelOutput,m.state.model,m.state.keys,m.state.totalCount);

    $('[data-murk-example-amounts]').on('click', function() {
      var data = this.dataset;
      var ref = m.get('repeatedExample');
      for (var i=0;i<parseInt(data.murkExampleAmounts,0);++i) {
        window.setTimeout(function() {
          ref.push({ name: 'murk', age: (5+i)});
        },0);
      }
      m.set('repeatedExample', ref);
      return false;
    });

    $('[data-murk-example-button]').on('click', function() {
      var data = this.dataset;
      var ref = m.get(data.murkExampleItem);
      if (data.murkExampleButton == 'add') {
        var person = {
          name: null,
          age: null
        };
        var safePerson = {
          msg: null
        };
        var $items = $('[data-murk-example-key]');
        for (var i=0;i<$items.length;++i) {
          var item = $items[i];
          var itemData = item.dataset;
          if (item.value) {
            person[itemData.murkExampleKey] = item.value;
          }
        }

        if (!person.name && !person.age) {
          safePerson.msg = 'Name and age fields required';
        } else if (!person.age && person.name) {
          safePerson.msg = 'Age field required';
        } else if (!person.name && person.age) {
          safePerson.msg = 'Name field required';
        }

        if (person.name && person.age) {
          ref.push(person);
          m.set(data.murkExampleItem, ref);
          if (m.get('formErrors')) m.set('formErrors', false);
        } else {
          if (safePerson.msg) {
            m.set('formErrors', safePerson.msg);
          }
        }

      } else if (data.murkExampleButton == 'remove') {
        ref = ref.splice(1, ref.length-1);
        m.set(data.murkExampleItem, ref);
      }
    });
    return m;
  }

  $(d).ready(init);

  return m;

})(window,document);